// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2
// and the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
// find the sum of the even-valued terms.

#include <iostream>
using namespace std;

int naive_approach() {
    // Generates every term in the Fibonacci sequence and checks if it is even
    const int max_val = 4000000;
    int even_sum = 0;
    int fib1 = 1;
    int fib2 = 2;
    int hold;

    while (fib2 < max_val) {
        hold = fib1 + fib2;
        if (hold % 2 == 0)
            even_sum += hold;

        fib1 = fib2;
        fib2 = hold;
    }

    return even_sum;
}

int sequence_approach() {
    // Generates every even term in the Fibonacci sequence
    // and uses the formula for finding the nth even term in the sequence
    // to calculate the sum of the even-valued terms
    const int max_val = 4000000;
    int curr_even = 2;
    int prev_even = 0;
    int hold;
    int even_sum = 2;

    while (hold < max_val) {
        hold = (4 * curr_even) + prev_even;
        if (hold > max_val)
            return even_sum;
        prev_even = curr_even;
        curr_even = hold;
        even_sum += curr_even;
    }

    return even_sum;
}

int main() {
    cout << "Naive Approach: " << naive_approach() << endl;
    cout << "Sequence Approach: " << sequence_approach() << endl;
    return 0;
}